                                                           Fart Draws
                                                        December 2023


                 Do Not The Cat Protocol (DNTCP)

Abstract

   "Do Not The Cat Protocol" (DNTCP) is a peer-to-peer (P2P) protocol 
   that establishes and maintains HTTP-based connections in network 
   environments with Network Address Translation (NAT) over WebRTC.
   The protocol enables communication in networks without Universal
   Plug and Play (UPnP), including those involving carrier-grade NAT.

1. Introduction

   This document proposes "Do Not The Cat Protocol" (DNTCP), a 
   peer-to-peer (P2P) networking protocol focused on enabling 
   NATed devices establish and maintain HTTP-based connections using
   WebRTC as the tunnelling method. Four main types of communication
   connections are discussed here - non-NAT-to-non-NAT [HTTP to peer], 
   NAT-to-non-NAT [ICE/RTC to peer], NAT-to-non-NAT-to-non-NAT [ICE/
   RTC to Federation to peer] and NAT-to-non-NAT-to-NAT [ICE/RTC to
   Federation to ICE/RTC to peer]. 

1.1. Terminology

   Flooding: Involves rebroadcasting messages to immediate peers to
   distribute to the network.

   Nodes: An entity involved in executing or experiencing the outcomes
   of the protocol (e.g., Sender Peer, Receiver Peer, Adjacent Peer,
   Non-NATed Routing Peer).

   Message: Information or directive transferred between actors.

2. Communication Methods

2.1. Non-NAT'ed Communication

   Involves direct HTTP requests made to the peer API over exposed 
   endpoint (e.g., /api/v1/route). Used as fallback in NAT-to-non-NAT
   and non-NAT-to-non-NAT connections.

2.2. NAT'ed Communication

   NAT'ed Bootstrapping forms an ICE/RTC relay to relay HTTP requests 
   to the peer AP. Used for all connections, but is the sole option 
   for NAT-to-non-NAT and NAT-to-NAT connections.

3. Peer Identity and Records

   Nodes maintain Peer Records, compiled as JSON packets:

   {
      "peer_name": "string",
      "unique_id": "string",
      "exposed": "boolean",
      "address": "string, optional",
      "created": "timestamp",
      "public_key": "string",
      "ttl": "number"
   }

   Peer Records aid nodes in determining the type of connection to be
   facilitated. Discovery of peers is an ongoing process, with nodes 
   frequently exchanging and updating their Peer Records.

   Each node has its own Peer Record to pass onto other peers.

3.1 Unique identity

   To create a unique identity to use for a node's unique_id, the
   following is computed.


3.2 Peer Registry and Keep-alive

   Nodes can register themselves or forward other peers at
   `/api/v1/peer`, returning their own Peer Record. This gets
   propagated to other nodes via flooding, and obtain a node's peer
   list via `/api/v1/peers`.

   TTL is used to make sure each broadcast doesn't keep propagating
   infinitely.


4. Bootstrapping Routines

   Bootstrapping help establish Peer Connections over ICE/RTC.

4.1. Direct Bootstrap Routine

   Exchanges SDP Offers and Answers directly between adjacent NATed
   nodes.
   
   Using SDP Offers, it is possible to establish an RTC connection
   between two peers.

   4.1.1 Connect Offer (CO): 

   This is received under '/api/v1/offer'.

   {
      "source_id": "string",
      "destination_id": "string",
      "turn_server": "string",
      "sdp_offer": "SDP information",
      "created": "timestamp",
      "ttl": "number"
   }

   4.1.2 Connect Response (CR):

   This is received under '/api/v1/connect'. This is the response to a
   CO.

   {
      "source_id": "string",
      "destination_id": "string",
      "turn_server": "string",
      "sdp_answer": "SDP information",
      "created": "timestamp",
      "ttl": "number"
   }

4.2. Indirect Bootstrap Routine

   Used when connections are to be established between non-adjacent 
   NATed nodes, leveraging non-NATed nodes as routing intermediaries.

   This is done via forwarding.
   
   On receive COs and CRs, if they're not the destination, nodes need to
   forward COs to peers' '/api/v1/offer' and CRs to '/api/v1/connect',
   until TTL is exhausted. These are assigned to their respective source
   peer record. CRs can be expired as well.
   

5. Peer Connections

5.1 Content Packets

   Post-connection, nodes can pass payloads amongst each other to be
   parsed. These messages encapsulate the network layer payloads. The
   encapsulated data is base64 encoded HTTP packets, dictated by the
   protocol attribute.

   {
     "source_id": "string",
     "destination_id": "string",
     "protocol": "string",
     "payload": "string",
     "ttl": "number"
   }

   Packet payloads are distributed over an ICE/RTC channel for non-NAT
   targets and sources. If all adjacent peers are exposed, requests
   containing packet payloads can be made directly over an HTTP PUT
   request at '/api/v1/packet_send'. 

   If the recepient isn't the target ID, the packet is flooded across
   thenetwork, and no longer passed around if TTL is exhausted or
   target ID is reached.

5.2 Routing Content Packets

   First a node must receive the Content Packet from a peer either via
   HTTP or ICE/RTC.

   On receiving a content packet, the payload is used to populate an
   HTTP request to a port on http://[::ffff:127.0.0.1], at the node's
   local network.

   The response to this request from the local server is then relayed
   onto the peer.

5.3 ICE/RTC Connection Tracking

   Each peer need to track their ICE/RTC connections, thus each one of
   them are maintained, expiring them after 30 seconds of no activity.
   Empty packets can be used to achieve keep-alive.

6. Security Considerations

   DNTCP does not include in-built security measures. Thus, each 
   participating node is responsible for its data security.

7. Acknowledgements

   Gratitude to all who contributed to the development of DNTCP.
